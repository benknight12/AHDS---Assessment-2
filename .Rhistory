scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
## add table with first few lines of data
head(polyps)
})
}
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Polyps baseline histogram"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput('RegTyp', 'Regression type', choices = list("lm","glm", "gam", "loess", "rlm"), selected = "lm")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("plot1")
plotOutput("plot2")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Polyps baseline histogram"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput('RegTyp', 'Regression type', choices = list("lm","glm", "gam", "loess", "rlm"), selected = "lm")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(list("plot1","plot2"))
)
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Polyps baseline histogram"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput('RegTyp', 'Regression type', choices = list("lm","glm", "gam", "loess", "rlm"), selected = "lm")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(list("plot1","plot2"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
## plot age against number3m and include a regression line with confint
output$plot2 <- ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
## add table with first few lines of data
head(polyps)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Polyps baseline histogram"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput('RegTyp', 'Regression type', choices = list("lm","glm", "gam", "loess", "rlm"), selected = "lm")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(list("plot1"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
## plot age against number3m and include a regression line with confint
output$plot2 <- ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
## add table with first few lines of data
head(polyps)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Polyps baseline histogram"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput('RegTyp', 'Regression type', choices = list("lm","glm", "gam", "loess", "rlm"), selected = "lm")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("plot1")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
## plot age against number3m and include a regression line with confint
output$plot2 <- ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
## add table with first few lines of data
head(polyps)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Polyps baseline histogram"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput('RegTyp', 'Regression type', choices = list("lm","glm", "gam", "loess", "rlm"), selected = "lm")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(list("plot1","plot2"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- renderPlot({
ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times'))}
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- renderPlot({
ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times') )}
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- renderPlot({
ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
})
## plot age against number3m and include a regression line with confint
output$plot2 <-  renderPlot({
ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
})
## add table with first few lines of data
head(polyps)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$plot1 <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- renderPlot({
ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
})
## plot age against number3m and include a regression line with confint
output$plot2 <-  renderPlot({
ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
})
## add table with first few lines of data
head(polyps)
})
}
runApp('Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/Week 9/firstshinyapp')
runApp('Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/Week 9/firstshinyapp')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Polyps baseline histogram"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput('RegTyp', 'Regression type', choices = list("lm","glm", "gam", "loess", "rlm"), selected = "lm")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(list("plot1","plot2"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$plot1 <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- renderPlot({
ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
})
## plot age against number3m and include a regression line with confint
output$plot2 <-  renderPlot({
ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Polyps baseline histogram"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
selectInput('RegTyp', 'Regression type', choices = list("lm","glm", "gam", "loess", "rlm"), selected = "lm")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("plot1")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$plot1 <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- renderPlot({
ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
})
## plot age against number3m and include a regression line with confint
output$plot2 <-  renderPlot({
ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
output$plot1 <- renderPlot({
ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=30) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
})
ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=30) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
# Define server logic required to draw a histogram
server <- function(input, output) {
output$plot1 <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- renderPlot({
ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
})
## plot age against number3m and include a regression line with confint
output$plot2 <-  renderPlot({
ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/Week 9/firstshinyapp')
runApp('Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/Week 9/firstshinyapp')
ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method="glm")
ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method="lm")
# Define server logic required to draw a histogram
server <- function(input, output) {
output$plot1 <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
output$plot1 <- renderPlot({
ggplot(polyps, aes(x=baseline, colour="blue", fill=sex)) +
geom_histogram(alpha=0.5, position="identity",bins=bins) +
facet_grid(sex ~ .) +
labs(x = 'Waiting time to next eruption (in mins)',
title = 'Histogram of waiting times')
})
## plot age against number3m and include a regression line with confint
output$plot2 <-  renderPlot({
ggplot(polyps, aes(x=age,y=number3m, colour="blue", fill=sex))  +
geom_point() +
facet_grid(sex ~ .) +
labs(x = 'Age', y='3m',
title = 'Seperate plots of correlation between 3m and age for both men and women') +
scale_x_log10() +
scale_y_log10() +
stat_smooth(method=input$RegTyp)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
renv::activate()
renv::snapshot()
renv::snapshot()
source("~/Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/AHDS_assessment2_2015310/code/static_vis_code.R", echo=TRUE)
library(shiny); runApp('Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/AHDS_assessment2_2015310/visualisation/us_food_shinyapp.R')
install.packages("ggplot2")
runApp('Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/AHDS_assessment2_2015310/visualisation/us_food_shinyapp.R')
renv::status()
library(shiny); runApp('Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/AHDS_assessment2_2015310/visualisation/us_food_shinyapp.R')
source("~/Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/AHDS_assessment2_2015310/code/static_vis_code.R", echo=TRUE)
setwd("/Users/benny/Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/AHDS_assessment2_2015310")
source("~/Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/AHDS_assessment2_2015310/code/static_vis_code.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofBristol/Health Data Science MSc/Applied Health Data Science/AHDS_assessment2_2015310/code/data_preparation.R", echo=TRUE)
summary(us_food$Fries)
library(shiny); runApp('visualisation/us_food_shinyapp.R')
runApp('visualisation/us_food_shinyapp.R')
View(clean_data)
View(clean_data)
View(clean_data)
runApp('visualisation/us_food_shinyapp.R')
runApp('visualisation/us_food_shinyapp.R')
runApp('visualisation/us_food_shinyapp.R')
